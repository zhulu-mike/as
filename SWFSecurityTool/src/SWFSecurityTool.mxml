<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="windowedapplication1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import flash.utils.getTimer;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			private var _urlLoader:URLLoader;
			private var emptyByte:ByteArray;
			private var _file:File;
			private var filter:Array = [new FileFilter("swf文件","*.swf")];
			private var _queenFile:Array = [];
			private var _index:int = 0;
			private var outTime:int = 0;
			private var fileStream:FileStream;
			private var opType:int = 1;
			private var password:String = "";
			private var needPsw:Boolean = false;
			private var pswByte:ByteArray;
			
			/**初始化完成时，加载空swf文件*/
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				fileStream = new FileStream();
				pswByte = new ByteArray();
				_urlLoader = new URLLoader();
				_urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
				_urlLoader.load(new URLRequest("swfpswassets/空文件.swf"));
				_urlLoader.addEventListener(Event.COMPLETE, onCompleteEmpty);
				this.addEventListener(ResizeEvent.RESIZE, onResize);
				maskShape.visible = true;
				noticeTip.text = "正在加载资源文件";
			}

			private function onResize(event:ResizeEvent):void
			{
				maskShape.graphics.clear();
				maskShape.graphics.beginFill(0x000000,0.5);
				maskShape.graphics.drawRect(0,0,stage.stageWidth,stage.stageHeight);
				maskShape.graphics.endFill();
				
				noticeTip.width = maskShape.width;
				noticeTip.y = (maskShape.height - noticeTip.height) * 0.5;
			}

			private function onCompleteEmpty(event:Event):void
			{
				emptyByte = new ByteArray();
				emptyByte.endian = Endian.LITTLE_ENDIAN;
				(_urlLoader.data as ByteArray).readBytes(emptyByte);
				trace("初始化完成");
				maskShape.visible = false;
			}
			
			/** */
			private function browse(t:int):void
			{
				opType = t;
				_queenFile.length = 0;
				_index = 0;
				outTime = 0;
				_file = new File();
				_file.browseForDirectory("选一个目录");
				_file.addEventListener(Event.SELECT, onSelectFile);
			}

			private function onSelectFile(event:Event):void
			{
				var files:Array = _file.getDirectoryListing();
				var len:int = files.length, i:int = 0;
				var tempFile:File, count:int = 0;
				maskShape.visible = true;
				noticeTip.text = "正在计算文件个数："+count;
				for (;i<len;i++)
				{
					tempFile = files[i];
					if (tempFile.extension == "swf")
					{
						_queenFile.push({file:tempFile});
						count++;
						noticeTip.text = "正在计算文件个数："+count;
					}
				}
				maskShape.visible = false;
				if (count == 0)
				{
					Alert.show("一个文件都没有");
					return;
				}
				Alert.show("文件总数"+count);
//				if (opType == 1)
//					callLater(beginPassword);
//				else
//					callLater(beginUnPassword);
			}
			
			/** */
			private function beginPassword():void
			{
				if (_queenFile.length <= _index)
				{
					Alert.show("已经全部加密完毕,共加密文件"+_index+"个");
					maskShape.visible = false;
					return;
				}
				var time:int = getTimer();
				if (outTime == 0)
					outTime = time;
				if (time - outTime >= 100)
				{
					//处理超过1秒，延迟处理
					outTime = time;
					callLater(beginPassword);
					return;
				}
				noticeTip.text = "正在加密第"+(_index+1)+"个文件";
				encryption(_index);
				_index++;
				beginPassword();
			}
			
			/**加密文件*/
			private function encryption(index:int):void
			{
				if (_queenFile.length <= index)
					return;
				var file:File = _queenFile[index].file;
				fileStream.open(file, FileMode.READ);
				var fileByte:ByteArray = new ByteArray();
				fileByte.endian = Endian.LITTLE_ENDIAN;
				fileStream.readBytes(fileByte);
				fileStream.close();
				var opLen:int = pswByte.length;//密钥长度
				if (fileByte.length < opLen)
					opLen = fileByte.length;
				var opI:int = 0, newB:int;
				for (;opI<opLen;opI++)
				{
					newB = fileByte[opI]^pswByte[opI];
					fileByte.writeByte(newB);
				}
				
				fileByte.position = fileByte.length;
				fileByte.writeBytes(pswByte);
				fileByte.position = 0;
				pswByte.position = 0;
				
				
				var newFile:ByteArray = new ByteArray();
				newFile.endian =  Endian.LITTLE_ENDIAN;
				newFile.writeBytes(emptyByte);
				newFile.writeByte(pswByte.length);//记录密钥的长度
				newFile.writeBytes(fileByte);
				var file2:File = file.parent;
				file2 = file2.resolvePath("新文件");
				file2 = file2.resolvePath(file.name);
				file2 = new File(file2.url);
				fileStream.open(file2, FileMode.WRITE);
				fileStream.writeBytes(newFile);
				fileStream.close();
			}
			
			/**开始解密*/
			private function beginUnPassword():void
			{
				if (_queenFile.length <= _index)
				{
					Alert.show("已经全部解密完毕,共解密文件"+_index+"个");
					maskShape.visible = false;
					return;
				}
				var time:int = getTimer();
				if (outTime == 0)
					outTime = time;
				if (time - outTime >= 100)
				{
					//处理超过1秒，延迟处理
					outTime = time;
					callLater(beginUnPassword);
					return;
				}
				noticeTip.text = "正在解密第"+(_index+1)+"个文件";
				unEncryption(_index);
				_index++;
				beginUnPassword();
			}
			
			/**解密*/
			private function unEncryption(index:int):void
			{
				if (_queenFile.length <= index)
					return;
				var file:File = _queenFile[index].file;
				fileStream.open(file, FileMode.READ);
				var fileByte:ByteArray = new ByteArray();
				fileByte.endian = Endian.LITTLE_ENDIAN;
				fileStream.readBytes(fileByte);
				fileStream.close();
				fileByte.position = emptyByte.length;
				
				var newFile:ByteArray = new ByteArray();
				newFile.endian =  Endian.LITTLE_ENDIAN;
				fileByte.readBytes(newFile);
				
				var newFile2:ByteArray = new ByteArray();
				newFile2.endian =  Endian.LITTLE_ENDIAN;
				
				var pswLen:int = newFile.readByte();
				var pswByteArray:ByteArray = new ByteArray();
				newFile.position = newFile.length - pswLen;
				newFile.readBytes(pswByteArray,0,pswLen);//密钥获取完毕
				
				newFile.position = 1;
				newFile.readBytes(newFile2, 0, newFile.length-pswLen-1);//swf文件获取完毕
				
				var opLen:int = pswLen;
				if (newFile2.length < opLen)
					opLen = newFile2.length;
				var opI:int = 0;
				for (;opI<opLen;opI++)
				{
					newFile2.writeByte(newFile2[opI]^pswByteArray[opI]);
				}
				
				var file2:File = file.parent;
				file2 = file2.resolvePath("解密后文件");
				file2 = file2.resolvePath(file.name);
				file2 = new File(file2.url);
				fileStream.open(file2, FileMode.WRITE);
				fileStream.writeBytes(newFile2);
				fileStream.close();
			}
			
			/**开始操作*/
			private function beginHandle():void
			{
				password = psw.text;
				pswByte.clear();
				pswByte.writeUTFBytes(password);
				maskShape.visible = true;
				if (opType == 1)
					callLater(beginPassword);
				else
					callLater(beginUnPassword);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Button x="194" y="29" label="浏览" click="browse(1)"/>
	<s:Label x="42" y="34" text="请选择要加密的文件目录："/>
	<s:Label x="42" y="62" text="请选择要解密的文件目录："/>
	<s:Button x="194" y="57" label="浏览" click="browse(2)"/>
	<s:TextInput x="140" y="86" width="244" id="psw"/>
	<s:Label x="42" y="91" text="请输入密钥："/>
	<s:Button x="388" y="86" label="开始" click="beginHandle()"/>
	<s:Group width="100%" height="100%" id="maskShape" visible="false">
		<s:Label id="noticeTip" textAlign="center" color="0xffffff" height="22"/>
	</s:Group>
	
	
</s:WindowedApplication>
